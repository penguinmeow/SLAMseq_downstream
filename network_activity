#driver inference
library(NetBID2)
network.dir <- "macrophage_network_gene"
network.project.name <- 'LAP_GSE118019' 

project_main_dir <- 'slamseqNetBID' 
current_date <- format(Sys.time(), "%Y-%m-%d") 
project_name <- sprintf('driver_%s',current_date)

analysis.par  <- NetBID.analysis.dir.create(project_main_dir=project_main_dir, project_name=project_name,
                                            network_dir=network.dir, network_project_name=network.project.name)
#remove version number of transcript -define a function to remove version number
reorganize <- function(matrix){
  library(stringr)
  mt <- matrix
  transcript <- mt$row.names.matrix.
  transcript <- str_replace(transcript, pattern = '.[0-9]+$',replacement = '')
  #convert transcript id into gene id
  rownames(mt) <- transcript
  mt <- mt[,-c(1,2)]
  #read in annotation table
  annot <- read.delim("netbid/Mus_musculus.GRCm38.102.convert.txt")
  #fdata for total matrix
  fdata <- annot[match(transcript, annot$Trans),1:3]
  rownames(fdata) <- transcript
  #rectify the colnames
  colname <- colnames(mt)
  colname <- sub("X","",colname)
  colnames(mt) <- colname
  return(list(mt,fdata))
}
':=' <- function(lhs, rhs) {
  frame <- parent.frame()
  lhs <- as.list(substitute(lhs))
  if (length(lhs) > 1)
    lhs <- lhs[-1]
  if (length(lhs) == 1) {
    do.call(`=`, list(lhs[[1]], rhs), envir=frame)
    return(invisible(NULL)) 
  }
  if (is.function(rhs) || is(rhs, 'formula'))
    rhs <- list(rhs)
  if (length(lhs) > length(rhs))
    rhs <- c(rhs, rep(list(NULL), length(lhs) - length(rhs)))
  for (i in 1:length(lhs))
    do.call(`=`, list(lhs[[i]], rhs[[i]]), envir=frame)
  return(invisible(NULL)) 
}
#readin slamseq results: total
totalcpm <- read.delim("netbid/ReadsCPM.txt" )
c(totalcpm, fdata.total) := reorganize(totalcpm)
#readin slamseq results: new
newcounts <- read.delim("netbid/TcReadCount.txt")
c(newcounts, fdata.new) := reorganize(newcounts)

#normalized new transcript counts to cpm
mat <- as.matrix(newcounts) +1 
newcpm <- as.data.frame(log(apply(mat,2, function(x) (x/sum(x))*1000000))) 

#metadata
meta <- read.delim("netbid/metadata.txt")
rownames(meta) <- meta$Series
meta <- meta[,-1]

#construct eset for slamseq
project_name <- sprintf('eset_%s',current_date)
network.par  <- NetBID.network.dir.create(project_main_dir=project_main_dir,project_name=project_name)
cpm_total_eset <- generate.eset(exp_mat = totalcpm, phenotype_info = meta,feature_info = fdata.total, annotation_info = "")
cpm_new_eset <- generate.eset(exp_mat = newcpm, phenotype_info = meta,feature_info = fdata.new, annotation_info = "")

# ID conversion, or merge transcript level to expression level, use_feature_info can be other dataframe instead of fData; optional;
cpm_total_eset <- update_eset.feature(use_eset=cpm_total_eset,use_feature_info=fData(cpm_total_eset),from_feature='Trans',to_feature='Gene',merge_method='median')
cpm_new_eset <- update_eset.feature(use_eset=cpm_new_eset,use_feature_info=fData(cpm_new_eset),from_feature='Trans',to_feature='Gene',merge_method='median')

# Add the variable into network.par. total.
network.par$net.eset <- cpm_total_eset 
# QC for the raw eset
draw.eset.QC(network.par$net.eset,outdir=network.par$out.dir.QC,intgroup=NULL,do.logtransform=FALSE,prefix='beforeQC_total',
             emb_plot_type='2D.interactive')
# Save Step 1 network.par as RData
NetBID.saveRData(network.par = network.par,step='exp-load_total')


# Add the variable into network.par. total.
network.par$net.eset <- cpm_new_eset
# Save Step 1 network.par as RData
NetBID.saveRData(network.par = network.par,step='exp-load_new')

#Why so many genes get lost when construct eset? 
#As several transcripts can come from same gene?

# Filter out low-expression genes : total
NetBID.loadRData(network.par = network.par,step='exp-load_total')
mat <- exprs(network.par$net.eset)
choose1 <- apply(mat<= quantile(mat, probs = 0.05), 1, sum)<= ncol(mat) * 0.90
print(table(choose1))
mat <- mat[choose1,]
# Update eset with normalized expression matrix
net_eset <- generate.eset(exp_mat=mat, phenotype_info=pData(network.par$net.eset)[colnames(mat),],
                          feature_info=fData(network.par$net.eset)[rownames(mat),],
                          annotation_info=annotation(network.par$net.eset))
# Updata network.par with new eset
network.par$net.eset <- net_eset
# QC for the normalized eset
draw.eset.QC(network.par$net.eset,outdir=network.par$out.dir.QC,intgroup=NULL,do.logtransform=FALSE,prefix='afterQC_total',
             emb_plot_type='2D.interactive')
# Save Step 2 network.par as RData
NetBID.saveRData(network.par = network.par,step='exp-QC_total')

# Filter out low-expression genes : new
NetBID.loadRData(network.par = network.par,step='exp-load_new')
mat <- exprs(network.par$net.eset)
choose1 <- apply(mat<= quantile(mat, probs = 0.05), 1, sum)<= ncol(mat) * 0.90
print(table(choose1)) #no gene were filter out

#draw eset QC error: lazy-load database '/Library/Frameworks/R.framework/Versions/3.6/Resources/library/data.table/R/data.table.rdb' is corrupt

#load total eset
NetBID.loadRData(network.par = network.par,step='exp-load_total')
analysis.par$cal.eset <- network.par$net.eset
NetBID.saveRData(analysis.par=analysis.par,step='exp-QC')
#get the network
analysis.par$tf.network  <- get.SJAracne.network(network_file=analysis.par$tf.network.file)
analysis.par$sig.network <- get.SJAracne.network(network_file=analysis.par$sig.network.file)
#Generate an HTML QC report for the constructed network, using
draw.network.QC(analysis.par$tf.network$igraph_obj,outdir=analysis.par$out.dir.QC,prefix='TF_net_',html_info_limit=FALSE)
draw.network.QC(analysis.par$sig.network$igraph_obj,outdir=analysis.par$out.dir.QC,prefix='SIG_net_',html_info_limit=TRUE)
# Merge network first
analysis.par$merge.network <- merge_TF_SIG.network(TF_network=analysis.par$tf.network,SIG_network=analysis.par$sig.network)
# Get activity matrix
ac_mat <- cal.Activity(target_list=analysis.par$merge.network$target_list,cal_mat=exprs(analysis.par$cal.eset),es.method='weightedmean')

# Create eset using activity matrix
analysis.par$merge.ac.eset <- generate.eset(exp_mat=ac_mat,phenotype_info=pData(analysis.par$cal.eset)[colnames(ac_mat),],
                                            feature_info=NULL,annotation_info='activity in net-dataset')
# QC plot for activity eset
draw.eset.QC(analysis.par$merge.ac.eset,outdir=analysis.par$out.dir.QC,intgroup=NULL,do.logtransform=FALSE,prefix='AC_')
# Save Step 2 analysis.par as RData
NetBID.saveRData(analysis.par=analysis.par,step='act-get')

#get DE for drivers
# Create empty list to store comparison result
analysis.par$DE <- list()
analysis.par$DA <- list()
intgroup <- get_int_group(network.par$net.eset)
intgroup

#in WT
# First comparison: How efferocytosis impact transcriptomic profiles
comp_name <- 'WT_UVAC_N.Vs.WT_N_N' # Each comparison must has a name
# Get sample names from each compared group
phe_info <- pData(analysis.par$cal.eset)
G0  <- rownames(phe_info)[which(phe_info$`Condition`=='WT_N_N')] # Experiment group
G1  <- rownames(phe_info)[which(phe_info$`Condition`=='WT_UVAC_N')] # Control group
DE_gene_bid <- getDE.BID.2G(eset=analysis.par$cal.eset,G1=G1,G0=G0,G1_name='WT_UVAC_N',G0_name='WT_N_N')
DA_driver_bid   <- getDE.BID.2G(eset=analysis.par$merge.ac.eset,G1=G1,G0=G0,G1_name='WT_UVAC_N',G0_name='WT_N_N')
# Save comparison result to list element in analysis.par, with comparison name
analysis.par$DE[[comp_name]] <- DE_gene_bid
analysis.par$DA[[comp_name]] <- DA_driver_bid

# Second Comparison: how would CHX addition impact the tramscriptomic profile during efferocytosis (PRG)
comp_name <- 'WT_UVAC_CHX.Vs.WT_UVAC_N' # Each comparison must has a name
# Get sample names from each compared group
phe_info <- pData(analysis.par$cal.eset)
G1  <- rownames(phe_info)[which(phe_info$`Condition`=='WT_UVAC_CHX')] # Experiment group
G0  <- rownames(phe_info)[which(phe_info$`Condition`=='WT_UVAC_N')] # Control group
DE_gene_bid <- getDE.BID.2G(eset=analysis.par$cal.eset,G1=G1,G0=G0,G1_name='WT_UVAC_CHX',G0_name='WT_UVAC_N')
DA_driver_bid   <- getDE.BID.2G(eset=analysis.par$merge.ac.eset,G1=G1,G0=G0,G1_name='WT_UVAC_CHX',G0_name='WT_UVAC_N')
# Save comparison result to list element in analysis.par, with comparison name
analysis.par$DE[[comp_name]] <- DE_gene_bid
analysis.par$DA[[comp_name]] <- DA_driver_bid

#in RubKO
# First comparison: How efferocytosis impact transcriptomic profiles
comp_name <- 'RubKO_UVAC_N.Vs.RubKO_N_N' # Each comparison must has a name
# Get sample names from each compared group
phe_info <- pData(analysis.par$cal.eset)
G0  <- rownames(phe_info)[which(phe_info$`Condition`=='RubKO_N_N')] # Experiment group
G1  <- rownames(phe_info)[which(phe_info$`Condition`=='RubKO_UVAC_N')] # Control group
DE_gene_bid <- getDE.BID.2G(eset=analysis.par$cal.eset,G1=G1,G0=G0,G1_name='RubKO_UVAC_N',G0_name='RubKO_N_N')
DA_driver_bid   <- getDE.BID.2G(eset=analysis.par$merge.ac.eset,G1=G1,G0=G0,G1_name='RubKO_UVAC_N',G0_name='RubKO_N_N')
# Save comparison result to list element in analysis.par, with comparison name
analysis.par$DE[[comp_name]] <- DE_gene_bid
analysis.par$DA[[comp_name]] <- DA_driver_bid

# Second Comparison: how would CHX addition impact the tramscriptomic profile during efferocytosis (PRG)
comp_name <- 'RubKO_UVAC_CHX.Vs.RubKO_UVAC_N' # Each comparison must has a name
# Get sample names from each compared group
phe_info <- pData(analysis.par$cal.eset)
G1  <- rownames(phe_info)[which(phe_info$`Condition`=='RubKO_UVAC_CHX')] # Experiment group
G0  <- rownames(phe_info)[which(phe_info$`Condition`=='RubKO_UVAC_N')] # Control group
DE_gene_bid <- getDE.BID.2G(eset=analysis.par$cal.eset,G1=G1,G0=G0,G1_name='RubKO_UVAC_CHX',G0_name='RubKO_UVAC_N')
DA_driver_bid   <- getDE.BID.2G(eset=analysis.par$merge.ac.eset,G1=G1,G0=G0,G1_name='RubKO_UVAC_CHX',G0_name='RubKO_UVAC_N')
# Save comparison result to list element in analysis.par, with comparison name
analysis.par$DE[[comp_name]] <- DE_gene_bid
analysis.par$DA[[comp_name]] <- DA_driver_bid

#How rubcn impact the efferocytosis
comp_name <- 'RubKO_UVAC_N.Vs.WT_UVAC_N' # Each comparison must has a name
# Get sample names from each compared group
phe_info <- pData(analysis.par$cal.eset)
G0  <- rownames(phe_info)[which(phe_info$`Condition`=='WT_UVAC_N')] # Experiment group
G1  <- rownames(phe_info)[which(phe_info$`Condition`=='RubKO_UVAC_N')] # Control group
DE_gene_bid <- getDE.BID.2G(eset=analysis.par$cal.eset,G1=G1,G0=G0,G1_name='RubKO_UVAC_N',G0_name='WT_UVAC_N')
DA_driver_bid   <- getDE.BID.2G(eset=analysis.par$merge.ac.eset,G1=G1,G0=G0,G1_name='RubKO_UVAC_N',G0_name='WT_UVAC_N')
# Save comparison result to list element in analysis.par, with comparison name
analysis.par$DE[[comp_name]] <- DE_gene_bid
analysis.par$DA[[comp_name]] <- DA_driver_bid

#How rubcn impact the PRG in efferocytosis
comp_name <- 'RubKO_UVAC_CHX.Vs.WT_UVAC_CHX' # Each comparison must has a name
# Get sample names from each compared group
phe_info <- pData(analysis.par$cal.eset)
G0  <- rownames(phe_info)[which(phe_info$`Condition`=='WT_UVAC_CHX')] # Experiment group
G1  <- rownames(phe_info)[which(phe_info$`Condition`=='RubKO_UVAC_CHX')] # Control group
DE_gene_bid <- getDE.BID.2G(eset=analysis.par$cal.eset,G1=G1,G0=G0,G1_name='RubKO_UVAC_CHX',G0_name='WT_UVAC_CHX')
DA_driver_bid   <- getDE.BID.2G(eset=analysis.par$merge.ac.eset,G1=G1,G0=G0,G1_name='RubKO_UVAC_CHX',G0_name='WT_UVAC_CHX')
# Save comparison result to list element in analysis.par, with comparison name
analysis.par$DE[[comp_name]] <- DE_gene_bid
analysis.par$DA[[comp_name]] <- DA_driver_bid

# optional: would CHX alone impact the transcriptome? (TRG=)
comp_name <- 'WT_N_CHX.Vs.WT_N_N' # Each comparison must has a name
# Get sample names from each compared group
phe_info <- pData(analysis.par$cal.eset)
G0  <- rownames(phe_info)[which(phe_info$`Condition`=='WT_N_N')] # Experiment group
G1  <- rownames(phe_info)[which(phe_info$`Condition`=='WT_N_CHX')] # Control group
DE_gene_bid <- getDE.BID.2G(eset=analysis.par$cal.eset,G1=G1,G0=G0,G1_name='WT_N_CHX',G0_name='WT_N_N')
DA_driver_bid   <- getDE.BID.2G(eset=analysis.par$merge.ac.eset,G1=G1,G0=G0,G1_name='WT_N_CHX',G0_name='WT_N_N')
# Save comparison result to list element in analysis.par, with comparison name
analysis.par$DE[[comp_name]] <- DE_gene_bid
analysis.par$DA[[comp_name]] <- DA_driver_bid


